name: Test and Deploy

on:
  push:
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up virtual X11
        run: sudo apt-get install xvfb

      - name: Set up PyQt libs
        uses: tlambert03/setup-qt-libs@v1

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Set up Python environment
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv requirements --dev > requirements.txt
          pip install -r requirements.txt
          pip install pytest-xvfb

      - name: Run test suite
        run: pytest -vvvv

  version-check:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check version against tag
        run: |
          VER=$(awk -F'["]' '/^__version__ =/ {print $2}' b*/__a*)
          if [ "$GITHUB_REF_NAME" != "$VER" ]; then
            echo "Version $VER does not match the GitHub tag $GITHUB_REF_NAME"
            exit 1
          fi

  pypi:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: [ test, version-check ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Set up Python environment
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv requirements --dev > requirements.txt
          pip install -r requirements.txt

      - name: Build and upload to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
        run: |
          python -m build
          twine upload dist/*

  flatpak:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: [ test, version-check ]
    env:
      MATURIN_REF: v1.2.3
      SETUPTOOLS_RUST_REF: v1.7.0
      FLATHUB_BRANCH: ${{ contains(github.ref_name, '-') && 'beta' || 'master' }}
    steps:
      - uses: actions/checkout@v4
      - uses: sanjacob/python-flatpak-generator-action@v1
        with:
          flatpak-repo: 'sanjacob/app.bbsync.BlackboardSync'
          flatpak-repo-branch: ${{ env.FLATHUB_BRANCH }}
          flatpak-repo-secret: ${{ secrets.FLATHUB_PAT }}
          use-pipfile: true
          python-version: '3.10.10'
          maturin-version: ${{ env.MATURIN_REF }}
          setuptools-rust-version: ${{ env.SETUPTOOLS_RUST_REF }}

      - name: Update other sources manually
        run: |
          mkdir my-tools
          git clone https://gist.github.com/b0ed4ff1be1e4d13ac47e21132b92dbd.git my-tools
          chmod +x my-tools/*.py

      - name: Update other sources manually
        run: |
          ../my-tools/*.py *.yml --update PyO3/maturin $MATURIN_REF --update pydantic/pydantic-core $PYDANTIC_CORE_REF --update sanjacob/BlackboardSync $GITHUB_REF_NAME
        working-directory: flathub

        # Deploy to GitHub

      - run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
        working-directory: flathub

      - run: |
          git add .
          git commit -m "Generated from $GITHUB_REF_NAME"
          git push origin HEAD
        working-directory: flathub

  pyinstaller:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
    if: startsWith(github.ref, 'refs/tags/')
    needs: [ test, version-check ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10.10"

      - name: Set up Python environment
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv requirements --dev > requirements.txt
          pip install -r requirements.txt
          python packaging/pyinst.py


      # Package Application

      - name: Create windows installer
        if: matrix.os == 'windows-latest'
        uses: joncloud/makensis-action@v4
        with:
          script-file: packaging/pkg_win.nsi
          arguments: "/V3 /DVERSION=${{github.ref_name}}"


      # Save Packages
      - name: Extract release notes
        id: extract-release-notes
        uses: ffurrer2/extract-release-notes@v1

      - name: Upload as release - only tagged commits
        uses: softprops/action-gh-release@v1
        with:
          body: ${{ steps.extract-release-notes.outputs.release_notes }}
          prerelease: ${{ contains(github.ref_name, '-') }}
          files: |
            dist/*.exe
            dist/*.dmg
